/*
 * This file is generated by jOOQ.
 */
package ch.teachu.techuapi.generated.tables.records;


import ch.teachu.techuapi.generated.tables.Token;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenRecord extends TableRecordImpl<TokenRecord> implements Record4<UUID, String, String, LocalDateTime> {

    private static final long serialVersionUID = 290965729;

    /**
     * Setter for <code>teachu.token.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>teachu.token.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>teachu.token.access</code>.
     */
    public void setAccess(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>teachu.token.access</code>.
     */
    public String getAccess() {
        return (String) get(1);
    }

    /**
     * Setter for <code>teachu.token.refresh</code>.
     */
    public void setRefresh(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>teachu.token.refresh</code>.
     */
    public String getRefresh() {
        return (String) get(2);
    }

    /**
     * Setter for <code>teachu.token.expires</code>.
     */
    public void setExpires(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>teachu.token.expires</code>.
     */
    public LocalDateTime getExpires() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, String, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Token.TOKEN.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return Token.TOKEN.ACCESS;
    }

    @Override
    public Field<String> field3() {
        return Token.TOKEN.REFRESH;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Token.TOKEN.EXPIRES;
    }

    @Override
    public UUID component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getAccess();
    }

    @Override
    public String component3() {
        return getRefresh();
    }

    @Override
    public LocalDateTime component4() {
        return getExpires();
    }

    @Override
    public UUID value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getAccess();
    }

    @Override
    public String value3() {
        return getRefresh();
    }

    @Override
    public LocalDateTime value4() {
        return getExpires();
    }

    @Override
    public TokenRecord value1(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public TokenRecord value2(String value) {
        setAccess(value);
        return this;
    }

    @Override
    public TokenRecord value3(String value) {
        setRefresh(value);
        return this;
    }

    @Override
    public TokenRecord value4(LocalDateTime value) {
        setExpires(value);
        return this;
    }

    @Override
    public TokenRecord values(UUID value1, String value2, String value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TokenRecord
     */
    public TokenRecord() {
        super(Token.TOKEN);
    }

    /**
     * Create a detached, initialised TokenRecord
     */
    public TokenRecord(UUID userId, String access, String refresh, LocalDateTime expires) {
        super(Token.TOKEN);

        set(0, userId);
        set(1, access);
        set(2, refresh);
        set(3, expires);
    }
}
