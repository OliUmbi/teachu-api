/*
 * This file is generated by jOOQ.
 */
package ch.teachu.techuapi.generated.tables;


import ch.teachu.teachuapi.sql.generation.UuidConverter;
import ch.teachu.techuapi.generated.Keys;
import ch.teachu.techuapi.generated.Teachu;
import ch.teachu.techuapi.generated.tables.records.SubjectRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Subject extends TableImpl<SubjectRecord> {

    private static final long serialVersionUID = -795559977;

    /**
     * The reference instance of <code>teachu.subject</code>
     */
    public static final Subject SUBJECT = new Subject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubjectRecord> getRecordType() {
        return SubjectRecord.class;
    }

    /**
     * The column <code>teachu.subject.id</code>.
     */
    public final TableField<SubjectRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "", new UuidConverter());

    /**
     * The column <code>teachu.subject.class_id</code>.
     */
    public final TableField<SubjectRecord, UUID> CLASS_ID = createField(DSL.name("class_id"), org.jooq.impl.SQLDataType.BINARY(16), this, "", new UuidConverter());

    /**
     * The column <code>teachu.subject.teacher_id</code>.
     */
    public final TableField<SubjectRecord, UUID> TEACHER_ID = createField(DSL.name("teacher_id"), org.jooq.impl.SQLDataType.BINARY(16), this, "", new UuidConverter());

    /**
     * The column <code>teachu.subject.name</code>.
     */
    public final TableField<SubjectRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>teachu.subject.note</code>.
     */
    public final TableField<SubjectRecord, String> NOTE = createField(DSL.name("note"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>teachu.subject.weight</code>.
     */
    public final TableField<SubjectRecord, Double> WEIGHT = createField(DSL.name("weight"), org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * Create a <code>teachu.subject</code> table reference
     */
    public Subject() {
        this(DSL.name("subject"), null);
    }

    /**
     * Create an aliased <code>teachu.subject</code> table reference
     */
    public Subject(String alias) {
        this(DSL.name(alias), SUBJECT);
    }

    /**
     * Create an aliased <code>teachu.subject</code> table reference
     */
    public Subject(Name alias) {
        this(alias, SUBJECT);
    }

    private Subject(Name alias, Table<SubjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private Subject(Name alias, Table<SubjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Subject(Table<O> child, ForeignKey<O, SubjectRecord> key) {
        super(child, key, SUBJECT);
    }

    @Override
    public Schema getSchema() {
        return Teachu.TEACHU;
    }

    @Override
    public UniqueKey<SubjectRecord> getPrimaryKey() {
        return Keys.KEY_SUBJECT_PRIMARY;
    }

    @Override
    public List<UniqueKey<SubjectRecord>> getKeys() {
        return Arrays.<UniqueKey<SubjectRecord>>asList(Keys.KEY_SUBJECT_PRIMARY);
    }

    @Override
    public Subject as(String alias) {
        return new Subject(DSL.name(alias), this);
    }

    @Override
    public Subject as(Name alias) {
        return new Subject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subject rename(String name) {
        return new Subject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subject rename(Name name) {
        return new Subject(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, UUID, String, String, Double> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
