/*
 * This file is generated by jOOQ.
 */
package ch.teachu.techuapi.generated.tables;


import ch.teachu.teachuapi.sql.generation.UuidConverter;
import ch.teachu.techuapi.generated.Keys;
import ch.teachu.techuapi.generated.Teachu;
import ch.teachu.techuapi.generated.tables.records.LessonRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lesson extends TableImpl<LessonRecord> {

    private static final long serialVersionUID = 1424614809;

    /**
     * The reference instance of <code>teachu.lesson</code>
     */
    public static final Lesson LESSON = new Lesson();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LessonRecord> getRecordType() {
        return LessonRecord.class;
    }

    /**
     * The column <code>teachu.lesson.id</code>.
     */
    public final TableField<LessonRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "", new UuidConverter());

    /**
     * The column <code>teachu.lesson.class_id</code>.
     */
    public final TableField<LessonRecord, UUID> CLASS_ID = createField(DSL.name("class_id"), org.jooq.impl.SQLDataType.BINARY(16), this, "", new UuidConverter());

    /**
     * The column <code>teachu.lesson.subject_id</code>.
     */
    public final TableField<LessonRecord, UUID> SUBJECT_ID = createField(DSL.name("subject_id"), org.jooq.impl.SQLDataType.BINARY(16), this, "", new UuidConverter());

    /**
     * The column <code>teachu.lesson.start_time</code>.
     */
    public final TableField<LessonRecord, String> START_TIME = createField(DSL.name("start_time"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>teachu.lesson.end_time</code>.
     */
    public final TableField<LessonRecord, String> END_TIME = createField(DSL.name("end_time"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>teachu.lesson.weekday</code>.
     */
    public final TableField<LessonRecord, String> WEEKDAY = createField(DSL.name("weekday"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>teachu.lesson.room</code>.
     */
    public final TableField<LessonRecord, String> ROOM = createField(DSL.name("room"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * Create a <code>teachu.lesson</code> table reference
     */
    public Lesson() {
        this(DSL.name("lesson"), null);
    }

    /**
     * Create an aliased <code>teachu.lesson</code> table reference
     */
    public Lesson(String alias) {
        this(DSL.name(alias), LESSON);
    }

    /**
     * Create an aliased <code>teachu.lesson</code> table reference
     */
    public Lesson(Name alias) {
        this(alias, LESSON);
    }

    private Lesson(Name alias, Table<LessonRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lesson(Name alias, Table<LessonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Lesson(Table<O> child, ForeignKey<O, LessonRecord> key) {
        super(child, key, LESSON);
    }

    @Override
    public Schema getSchema() {
        return Teachu.TEACHU;
    }

    @Override
    public UniqueKey<LessonRecord> getPrimaryKey() {
        return Keys.KEY_LESSON_PRIMARY;
    }

    @Override
    public List<UniqueKey<LessonRecord>> getKeys() {
        return Arrays.<UniqueKey<LessonRecord>>asList(Keys.KEY_LESSON_PRIMARY);
    }

    @Override
    public Lesson as(String alias) {
        return new Lesson(DSL.name(alias), this);
    }

    @Override
    public Lesson as(Name alias) {
        return new Lesson(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lesson rename(String name) {
        return new Lesson(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lesson rename(Name name) {
        return new Lesson(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
