/*
 * This file is generated by jOOQ.
 */
package ch.teachu.techuapi.generated.tables.records;


import ch.teachu.techuapi.generated.tables.Grade;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GradeRecord extends UpdatableRecordImpl<GradeRecord> implements Record4<UUID, UUID, Double, String> {

    private static final long serialVersionUID = -265289129;

    /**
     * Setter for <code>teachu.grade.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>teachu.grade.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>teachu.grade.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>teachu.grade.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>teachu.grade.mark</code>.
     */
    public void setMark(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>teachu.grade.mark</code>.
     */
    public Double getMark() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>teachu.grade.note</code>.
     */
    public void setNote(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>teachu.grade.note</code>.
     */
    public String getNote() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, Double, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, UUID, Double, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Grade.GRADE.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Grade.GRADE.USER_ID;
    }

    @Override
    public Field<Double> field3() {
        return Grade.GRADE.MARK;
    }

    @Override
    public Field<String> field4() {
        return Grade.GRADE.NOTE;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getUserId();
    }

    @Override
    public Double component3() {
        return getMark();
    }

    @Override
    public String component4() {
        return getNote();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getUserId();
    }

    @Override
    public Double value3() {
        return getMark();
    }

    @Override
    public String value4() {
        return getNote();
    }

    @Override
    public GradeRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public GradeRecord value2(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public GradeRecord value3(Double value) {
        setMark(value);
        return this;
    }

    @Override
    public GradeRecord value4(String value) {
        setNote(value);
        return this;
    }

    @Override
    public GradeRecord values(UUID value1, UUID value2, Double value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GradeRecord
     */
    public GradeRecord() {
        super(Grade.GRADE);
    }

    /**
     * Create a detached, initialised GradeRecord
     */
    public GradeRecord(UUID id, UUID userId, Double mark, String note) {
        super(Grade.GRADE);

        set(0, id);
        set(1, userId);
        set(2, mark);
        set(3, note);
    }
}
