/*
 * This file is generated by jOOQ.
 */
package ch.teachu.teachuapi.generated.tables;


import ch.teachu.teachuapi.generated.Keys;
import ch.teachu.teachuapi.generated.Teachu;
import ch.teachu.teachuapi.generated.tables.records.TimetableRecord;
import ch.teachu.teachuapi.sql.generation.UuidConverter;

import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Timetable extends TableImpl<TimetableRecord> {

    private static final long serialVersionUID = -434552733;

    /**
     * The reference instance of <code>teachu.timetable</code>
     */
    public static final Timetable TIMETABLE = new Timetable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TimetableRecord> getRecordType() {
        return TimetableRecord.class;
    }

    /**
     * The column <code>teachu.timetable.id</code>.
     */
    public final TableField<TimetableRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "", new UuidConverter());

    /**
     * The column <code>teachu.timetable.lesson_index</code>.
     */
    public final TableField<TimetableRecord, Integer> LESSON_INDEX = createField(DSL.name("lesson_index"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>teachu.timetable.start_time</code>.
     */
    public final TableField<TimetableRecord, LocalTime> START_TIME = createField(DSL.name("start_time"), org.jooq.impl.SQLDataType.LOCALTIME, this, "");

    /**
     * The column <code>teachu.timetable.end_time</code>.
     */
    public final TableField<TimetableRecord, LocalTime> END_TIME = createField(DSL.name("end_time"), org.jooq.impl.SQLDataType.LOCALTIME, this, "");

    /**
     * Create a <code>teachu.timetable</code> table reference
     */
    public Timetable() {
        this(DSL.name("timetable"), null);
    }

    /**
     * Create an aliased <code>teachu.timetable</code> table reference
     */
    public Timetable(String alias) {
        this(DSL.name(alias), TIMETABLE);
    }

    /**
     * Create an aliased <code>teachu.timetable</code> table reference
     */
    public Timetable(Name alias) {
        this(alias, TIMETABLE);
    }

    private Timetable(Name alias, Table<TimetableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Timetable(Name alias, Table<TimetableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Timetable(Table<O> child, ForeignKey<O, TimetableRecord> key) {
        super(child, key, TIMETABLE);
    }

    @Override
    public Schema getSchema() {
        return Teachu.TEACHU;
    }

    @Override
    public UniqueKey<TimetableRecord> getPrimaryKey() {
        return Keys.KEY_TIMETABLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<TimetableRecord>> getKeys() {
        return Arrays.<UniqueKey<TimetableRecord>>asList(Keys.KEY_TIMETABLE_PRIMARY);
    }

    @Override
    public Timetable as(String alias) {
        return new Timetable(DSL.name(alias), this);
    }

    @Override
    public Timetable as(Name alias) {
        return new Timetable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Timetable rename(String name) {
        return new Timetable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Timetable rename(Name name) {
        return new Timetable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, Integer, LocalTime, LocalTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
