/*
 * This file is generated by jOOQ.
 */
package ch.teachu.teachuapi.generated.tables;


import ch.teachu.teachuapi.enums.SchoolInfoState;
import ch.teachu.teachuapi.generated.Keys;
import ch.teachu.teachuapi.generated.Teachu;
import ch.teachu.teachuapi.generated.tables.records.SchoolInfoRecord;
import ch.teachu.teachuapi.sql.generation.SchoolInfoStateConverter;
import ch.teachu.teachuapi.sql.generation.UuidConverter;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchoolInfo extends TableImpl<SchoolInfoRecord> {

    private static final long serialVersionUID = -82740175;

    /**
     * The reference instance of <code>teachu.school_info</code>
     */
    public static final SchoolInfo SCHOOL_INFO = new SchoolInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchoolInfoRecord> getRecordType() {
        return SchoolInfoRecord.class;
    }

    /**
     * The column <code>teachu.school_info.id</code>.
     */
    public final TableField<SchoolInfoRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "", new UuidConverter());

    /**
     * The column <code>teachu.school_info.title</code>.
     */
    public final TableField<SchoolInfoRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>teachu.school_info.message</code>.
     */
    public final TableField<SchoolInfoRecord, String> MESSAGE = createField(DSL.name("message"), org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>teachu.school_info.date</code>.
     */
    public final TableField<SchoolInfoRecord, LocalDate> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>teachu.school_info.img</code>.
     */
    public final TableField<SchoolInfoRecord, String> IMG = createField(DSL.name("img"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>teachu.school_info.user_id</code>.
     */
    public final TableField<SchoolInfoRecord, UUID> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BINARY(16), this, "", new UuidConverter());

    /**
     * The column <code>teachu.school_info.school_info_state</code>.
     */
    public final TableField<SchoolInfoRecord, SchoolInfoState> SCHOOL_INFO_STATE = createField(DSL.name("school_info_state"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "", new SchoolInfoStateConverter());

    /**
     * The column <code>teachu.school_info.important</code>.
     */
    public final TableField<SchoolInfoRecord, Boolean> IMPORTANT = createField(DSL.name("important"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>teachu.school_info.pinned</code>.
     */
    public final TableField<SchoolInfoRecord, Boolean> PINNED = createField(DSL.name("pinned"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>teachu.school_info</code> table reference
     */
    public SchoolInfo() {
        this(DSL.name("school_info"), null);
    }

    /**
     * Create an aliased <code>teachu.school_info</code> table reference
     */
    public SchoolInfo(String alias) {
        this(DSL.name(alias), SCHOOL_INFO);
    }

    /**
     * Create an aliased <code>teachu.school_info</code> table reference
     */
    public SchoolInfo(Name alias) {
        this(alias, SCHOOL_INFO);
    }

    private SchoolInfo(Name alias, Table<SchoolInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchoolInfo(Name alias, Table<SchoolInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SchoolInfo(Table<O> child, ForeignKey<O, SchoolInfoRecord> key) {
        super(child, key, SCHOOL_INFO);
    }

    @Override
    public Schema getSchema() {
        return Teachu.TEACHU;
    }

    @Override
    public UniqueKey<SchoolInfoRecord> getPrimaryKey() {
        return Keys.KEY_SCHOOL_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<SchoolInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<SchoolInfoRecord>>asList(Keys.KEY_SCHOOL_INFO_PRIMARY);
    }

    @Override
    public SchoolInfo as(String alias) {
        return new SchoolInfo(DSL.name(alias), this);
    }

    @Override
    public SchoolInfo as(Name alias) {
        return new SchoolInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchoolInfo rename(String name) {
        return new SchoolInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchoolInfo rename(Name name) {
        return new SchoolInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, String, String, LocalDate, String, UUID, SchoolInfoState, Boolean, Boolean> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
