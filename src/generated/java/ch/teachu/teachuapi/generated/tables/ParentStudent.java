/*
 * This file is generated by jOOQ.
 */
package ch.teachu.teachuapi.generated.tables;


import ch.teachu.teachuapi.generated.Teachu;
import ch.teachu.teachuapi.generated.tables.records.ParentStudentRecord;
import ch.teachu.teachuapi.sql.generation.UuidConverter;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ParentStudent extends TableImpl<ParentStudentRecord> {

    private static final long serialVersionUID = -193780202;

    /**
     * The reference instance of <code>teachu.parent_student</code>
     */
    public static final ParentStudent PARENT_STUDENT = new ParentStudent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParentStudentRecord> getRecordType() {
        return ParentStudentRecord.class;
    }

    /**
     * The column <code>teachu.parent_student.parent_id</code>.
     */
    public final TableField<ParentStudentRecord, UUID> PARENT_ID = createField(DSL.name("parent_id"), org.jooq.impl.SQLDataType.BINARY(16), this, "", new UuidConverter());

    /**
     * The column <code>teachu.parent_student.student_id</code>.
     */
    public final TableField<ParentStudentRecord, UUID> STUDENT_ID = createField(DSL.name("student_id"), org.jooq.impl.SQLDataType.BINARY(16), this, "", new UuidConverter());

    /**
     * Create a <code>teachu.parent_student</code> table reference
     */
    public ParentStudent() {
        this(DSL.name("parent_student"), null);
    }

    /**
     * Create an aliased <code>teachu.parent_student</code> table reference
     */
    public ParentStudent(String alias) {
        this(DSL.name(alias), PARENT_STUDENT);
    }

    /**
     * Create an aliased <code>teachu.parent_student</code> table reference
     */
    public ParentStudent(Name alias) {
        this(alias, PARENT_STUDENT);
    }

    private ParentStudent(Name alias, Table<ParentStudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ParentStudent(Name alias, Table<ParentStudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ParentStudent(Table<O> child, ForeignKey<O, ParentStudentRecord> key) {
        super(child, key, PARENT_STUDENT);
    }

    @Override
    public Schema getSchema() {
        return Teachu.TEACHU;
    }

    @Override
    public ParentStudent as(String alias) {
        return new ParentStudent(DSL.name(alias), this);
    }

    @Override
    public ParentStudent as(Name alias) {
        return new ParentStudent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ParentStudent rename(String name) {
        return new ParentStudent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ParentStudent rename(Name name) {
        return new ParentStudent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
