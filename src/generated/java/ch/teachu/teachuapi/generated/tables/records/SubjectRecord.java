/*
 * This file is generated by jOOQ.
 */
package ch.teachu.teachuapi.generated.tables.records;


import ch.teachu.teachuapi.generated.tables.Subject;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubjectRecord extends UpdatableRecordImpl<SubjectRecord> implements Record3<UUID, String, Double> {

    private static final long serialVersionUID = -1393261231;

    /**
     * Setter for <code>teachu.subject.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>teachu.subject.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>teachu.subject.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>teachu.subject.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>teachu.subject.weight</code>.
     */
    public void setWeight(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>teachu.subject.weight</code>.
     */
    public Double getWeight() {
        return (Double) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, Double> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, String, Double> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Subject.SUBJECT.ID;
    }

    @Override
    public Field<String> field2() {
        return Subject.SUBJECT.NAME;
    }

    @Override
    public Field<Double> field3() {
        return Subject.SUBJECT.WEIGHT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Double component3() {
        return getWeight();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Double value3() {
        return getWeight();
    }

    @Override
    public SubjectRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SubjectRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public SubjectRecord value3(Double value) {
        setWeight(value);
        return this;
    }

    @Override
    public SubjectRecord values(UUID value1, String value2, Double value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SubjectRecord
     */
    public SubjectRecord() {
        super(Subject.SUBJECT);
    }

    /**
     * Create a detached, initialised SubjectRecord
     */
    public SubjectRecord(UUID id, String name, Double weight) {
        super(Subject.SUBJECT);

        set(0, id);
        set(1, name);
        set(2, weight);
    }
}
